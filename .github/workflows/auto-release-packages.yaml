on:
  schedule:
  - cron: '5 0 * * *'

name: Auto release packages

jobs:
  build:
    name: Auto release packages
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for changes
        id: check-for-changes
        run: |
          RELEASE=false
          BUMP=patch

          make .bin/jq .bin/semver

          TIMESTAMP="$(
              curl "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
                    --silent \
                    --location \
                    --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | \
                  ./.bin/jq 'map(select(.tag_name | startswith("packages/"))) | first' | \
                  ./.bin/jq --raw-output .created_at
          )"
          echo "Timestamp of latest release is ${TIMESTAMP}."

          RENOVATE_PR_COUNT="$(
              curl "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues?state=closed&since=${TIMESTAMP}&labels=type/renovate" \
                      --silent \
                      --location \
                      --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | \
                  ./.bin/jq '.[].number' | \
                  wc -l
          )"
          if test "${RENOVATE_PR_COUNT}" -gt 0; then
              echo "Found closed pull requests. Will release a patch (at least)."
              RELEASE=true
              BUMP=patch
          fi

          PACKAGE_ISSUE_COUNT="$(
              curl "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues?state=closed&since=${TIMESTAMP}&labels=component/package" \
                      --silent \
                      --location \
                      --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | \
                  ./.bin/jq '.[].number' | \
                  wc -l
          )"
          if test "${PACKAGE_ISSUE_COUNT}" -gt 0; then
              echo "Found closed issues. Will release a minor version."
              RELEASE=true
              BUMP=minor
          fi

          echo "::set-output name=release::${RELEASE}"
          if ${RELEASE}; then
              make packages.json
              
              echo "Release required (RELEASE=${RELEASE})"
              VERSION="$(
                  curl "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" \
                        --silent \
                        --location \
                        --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | \
                      ./.bin/jq --raw-output .tag_name | \
                      cut -d/ -f2
              )"
              echo "Version of last release is ${VERSION}."
              NEW_VERSION="packages/$(./.bin/semver bump "${BUMP}" "${VERSION}")"
              echo "Version of next release if ${NEW_VERSION}"
              echo "::set-output name=tagname::${NEW_VERSION}"
          fi

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        if: steps.check-for-changes.outputs.release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.check-for-changes.outputs.tagname }}
          release_name: Release ${{ steps.check-for-changes.outputs.tagname }}
          body: |
            ADD CHANGELOG HERE
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        if: steps.check-for-changes.outputs.release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./packages.json
          asset_name: packages.json
          asset_content_type: application/json
